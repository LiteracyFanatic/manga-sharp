// <auto-generated />
namespace manga.Migrations

open System
open MangaSharp.Database
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion

[<DbContext(typeof<MangaContext>)>]
[<Migration("20220320143518_RemoveOldBookmarkColumn")>]
type RemoveOldBookmarkColumn() =
    inherit Migration()

    override this.Up(migrationBuilder: MigrationBuilder) =
        migrationBuilder.Sql(
            "
            with Data as (
                select
                    x.Id as MangaId,
                    x.BookmarkChapterIdNew as BookmarkChapterId,
                    (select Id
                    from Pages as p
                    where p.ChapterId = x.BookmarkChapterIdNew
                        and p.Name = (
                            case when x.Direction = 'Horizontal' then
                                substr(x.Bookmark, instr(x.Bookmark, '/') + 1)
                            else null end)
                    ) as BookmarkPageId
                from (
                    select m.*,
                        (select Id
                        from Chapters as c
                        where c.MangaId = m.Id
                            and Title = (
                                case when m.Direction = 'Horizontal' then
                                    substr(m.Bookmark, 0, instr(m.Bookmark, '/'))
                                    else m.Bookmark end)
                        ) as BookmarkChapterIdNew
                    from Manga as m
                ) as x
            )

            update Manga as m
            set
                BookmarkChapterId = (select BookmarkChapterId from Data as d where d.MangaId = m.Id),
                BookmarkPageId = (select BookmarkPageId from Data as d where d.MangaId = m.Id);"
        )
        |> ignore

        migrationBuilder.DropColumn(name = "Bookmark", table = "Manga") |> ignore


    override this.Down(migrationBuilder: MigrationBuilder) =
        migrationBuilder.AddColumn<string>(
            name = "Bookmark",
            table = "Manga",
            ``type`` = "TEXT",
            maxLength = Nullable(10),
            nullable = true
        )
        |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder.HasAnnotation("ProductVersion", "6.0.2") |> ignore

        modelBuilder.Entity(
            "MangaSharp.Database.MangaDomain+Chapter",
            (fun b ->

                b
                    .Property<Guid>("Id")
                    .IsRequired(true)
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                |> ignore

                b
                    .Property<DateTime>("Created")
                    .IsRequired(true)
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("datetime()")
                |> ignore

                b
                    .Property<string>("DownloadStatus")
                    .IsRequired(true)
                    .HasMaxLength(10)
                    .HasColumnType("TEXT")
                |> ignore

                b.Property<int>("Index").IsRequired(true).HasColumnType("INTEGER") |> ignore

                b.Property<Guid>("MangaId").IsRequired(true).HasColumnType("TEXT") |> ignore

                b
                    .Property<string option>("Title")
                    .IsRequired(false)
                    .HasMaxLength(200)
                    .HasColumnType("TEXT")
                |> ignore

                b
                    .Property<string>("Url")
                    .IsRequired(true)
                    .HasMaxLength(200)
                    .HasColumnType("TEXT")
                |> ignore

                b.HasKey("Id") |> ignore


                b.HasIndex("MangaId") |> ignore

                b.ToTable("Chapters") |> ignore

            )
        )
        |> ignore

        modelBuilder.Entity(
            "MangaSharp.Database.MangaDomain+Manga",
            (fun b ->

                b
                    .Property<Guid>("Id")
                    .IsRequired(true)
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                |> ignore

                b.Property<DateTime option>("Accessed").IsRequired(false).HasColumnType("TEXT")
                |> ignore

                b
                    .Property<DateTime>("Created")
                    .IsRequired(true)
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValueSql("datetime()")
                |> ignore

                b
                    .Property<string>("Direction")
                    .IsRequired(true)
                    .HasMaxLength(10)
                    .HasColumnType("TEXT")
                |> ignore

                b
                    .Property<string>("Title")
                    .IsRequired(true)
                    .HasMaxLength(1000)
                    .HasColumnType("TEXT")
                |> ignore

                b
                    .Property<string>("Url")
                    .IsRequired(true)
                    .HasMaxLength(200)
                    .HasColumnType("TEXT")
                |> ignore

                b
                    .Property<Nullable<Guid>>("_BookmarkChapterId")
                    .IsRequired(false)
                    .HasColumnType("TEXT")
                    .HasColumnName("BookmarkChapterId")
                |> ignore

                b
                    .Property<Nullable<Guid>>("_BookmarkPageId")
                    .IsRequired(false)
                    .HasColumnType("TEXT")
                    .HasColumnName("BookmarkPageId")
                |> ignore

                b.HasKey("Id") |> ignore


                b.HasIndex("Title").IsUnique() |> ignore


                b.HasIndex("_BookmarkChapterId").IsUnique() |> ignore


                b.HasIndex("_BookmarkPageId").IsUnique() |> ignore

                b.ToTable("Manga") |> ignore

            )
        )
        |> ignore

        modelBuilder.Entity(
            "MangaSharp.Database.MangaDomain+Page",
            (fun b ->

                b
                    .Property<Guid>("Id")
                    .IsRequired(true)
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                |> ignore

                b.Property<Guid>("ChapterId").IsRequired(true).HasColumnType("TEXT") |> ignore

                b
                    .Property<string>("File")
                    .IsRequired(true)
                    .HasMaxLength(2000)
                    .HasColumnType("TEXT")
                |> ignore

                b
                    .Property<string>("Name")
                    .IsRequired(true)
                    .HasMaxLength(10)
                    .HasColumnType("TEXT")
                |> ignore

                b.HasKey("Id") |> ignore


                b.HasIndex("ChapterId") |> ignore

                b.ToTable("Pages") |> ignore

            )
        )
        |> ignore

        modelBuilder.Entity(
            "MangaSharp.Database.MangaDomain+Chapter",
            (fun b ->
                b
                    .HasOne("MangaSharp.Database.MangaDomain+Manga", "Manga")
                    .WithMany("Chapters")
                    .HasForeignKey("MangaId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                |> ignore

            )
        )
        |> ignore

        modelBuilder.Entity(
            "MangaSharp.Database.MangaDomain+Manga",
            (fun b ->
                b
                    .HasOne("MangaSharp.Database.MangaDomain+Chapter", "_BookmarkChapter")
                    .WithOne()
                    .HasForeignKey("MangaSharp.Database.MangaDomain+Manga", "_BookmarkChapterId")
                |> ignore

                b
                    .HasOne("MangaSharp.Database.MangaDomain+Page", "_BookmarkPage")
                    .WithOne()
                    .HasForeignKey("MangaSharp.Database.MangaDomain+Manga", "_BookmarkPageId")
                |> ignore

            )
        )
        |> ignore

        modelBuilder.Entity(
            "MangaSharp.Database.MangaDomain+Page",
            (fun b ->
                b
                    .HasOne("MangaSharp.Database.MangaDomain+Chapter", "Chapter")
                    .WithMany("Pages")
                    .HasForeignKey("ChapterId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                |> ignore

            )
        )
        |> ignore

        modelBuilder.Entity(
            "MangaSharp.Database.MangaDomain+Chapter",
            (fun b ->

                b.Navigation("Pages") |> ignore)
        )
        |> ignore

        modelBuilder.Entity(
            "MangaSharp.Database.MangaDomain+Manga",
            (fun b ->

                b.Navigation("Chapters") |> ignore)
        )
        |> ignore
